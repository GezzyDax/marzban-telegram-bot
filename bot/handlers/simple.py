"""Simplified handlers with clear UX"""

import logging
import math
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database import (
    User,
    get_user_by_telegram_id,
    list_user_bindings,
    create_user,
    list_users,
    search_users,
    get_notification_settings,
    update_notification_settings,
    log_admin_action,
)
from bot.services import MarzbanAPI, MarzbanAPIError
from bot.services.formatters import format_bytes
from bot.utils.formatters import format_progress_bar, format_date_relative, format_status_emoji
from bot.keyboards.simple import (
    get_main_user_keyboard,
    get_main_admin_keyboard,
    get_request_user_keyboard,
    get_cancel_keyboard,
    get_confirmation_inline,
    get_subscription_inline,
    get_notification_toggle_inline,
    get_instruction_inline,
    get_user_list_navigation,
)
from bot.states import AddUserStates, SearchUserStates

logger = logging.getLogger(__name__)
router = Router(name="simple")


# ============= START =============
@router.message(CommandStart())
async def cmd_start(message: Message, db_user: User | None, is_admin: bool):
    """Start command - show appropriate keyboard"""
    if not db_user:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return

    # Always show user mode first
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: <code>{db_user.marzban_username}</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_user_keyboard(is_admin=is_admin),
        parse_mode="HTML"
    )


# ============= MODE SWITCHING =============
@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def switch_to_admin(message: Message, is_admin: bool):
    """Switch to admin mode"""
    if not is_admin:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=get_main_admin_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
async def switch_to_user(message: Message, is_admin: bool, db_user: User | None):
    """Switch to user mode"""
    if not db_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await message.answer(
        f"üë§ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        f"üîê Username: <code>{db_user.marzban_username}</code>",
        reply_markup=get_main_user_keyboard(is_admin=is_admin),
        parse_mode="HTML"
    )


# ============= USER ACTIONS =============
@router.message(F.text == "üìä –ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription(message: Message, db_user: User | None, marzban: MarzbanAPI):
    """Show subscription with beautiful formatting"""
    if not db_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        # Convert expire
        expire_dt = None
        if marzban_user.expire:
            expire_dt = datetime.fromtimestamp(marzban_user.expire) if isinstance(marzban_user.expire, (int, float)) else marzban_user.expire

        # Status emoji
        status_emoji = format_status_emoji(
            marzban_user.status,
            expire_dt,
            marzban_user.used_traffic,
            marzban_user.data_limit if marzban_user.data_limit else 0
        )

        used = marzban_user.used_traffic
        limit = marzban_user.data_limit if marzban_user.data_limit else 0

        text = (
            f"{status_emoji} <b>–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"üë§ <code>{marzban_user.username}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{marzban_user.status}</b>\n\n"
            f"üìà <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        )

        if limit > 0:
            progress = format_progress_bar(used, limit)
            text += f"{progress}\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{format_bytes(used)}</b> –∏–∑ <b>{format_bytes(limit)}</b>\n"
            remaining = limit - used
            if remaining > 0:
                text += f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{format_bytes(remaining)}</b>\n"
        else:
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{format_bytes(used)}</b>\n"
            text += "–õ–∏–º–∏—Ç: <b>–ë–µ–∑–ª–∏–º–∏—Ç</b>\n"

        if expire_dt:
            text += f"\nüìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b>\n{format_date_relative(expire_dt)}"

        await message.answer(
            text,
            reply_markup=get_subscription_inline(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Failed to get subscription: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ")


@router.message(F.text == "üîó –°—Å—ã–ª–∫–∞")
async def get_link(message: Message, db_user: User | None, marzban: MarzbanAPI):
    """Get subscription link"""
    if not db_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        if not marzban_user.subscription_url:
            await message.answer("‚ùå Subscription URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = (
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—ë –≤ VPN –∫–ª–∏–µ–Ω—Ç:\n\n"
            f"<code>{marzban_user.subscription_url}</code>\n\n"
            "üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë)\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ VPN –∫–ª–∏–µ–Ω—Ç\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'"
        )

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Failed to get link: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instruction(message: Message):
    """Show instruction"""
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>\n\n"
        "<b>üì± –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ V2Box\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–æ—Ç–µ\n"
        "3. –í V2Box: '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
        "4. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
        "<b>üíª –î–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:</b>\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ NekoBox\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞\n"
        "3. NekoBox ‚Üí –ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞\n"
        "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ\n\n"
        "–°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã:"
    )

    await message.answer(
        text,
        reply_markup=get_instruction_inline(),
        parse_mode="HTML"
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_user_settings(message: Message, session: AsyncSession, db_user: User | None):
    """Show user settings"""
    if not db_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    settings = await get_notification_settings(session, db_user.telegram_id)

    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"{'üîî' if settings.notify_expiry else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏\n"
        f"{'üîî' if settings.notify_traffic else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    await message.answer(
        text,
        reply_markup=get_notification_toggle_inline(settings.notify_expiry, settings.notify_traffic),
        parse_mode="HTML"
    )


# ============= NOTIFICATION SETTINGS =============
@router.callback_query(F.data == "notification_settings")
async def notification_settings_callback(callback: CallbackQuery, session: AsyncSession, db_user: User | None):
    """Show notification settings"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    settings = await get_notification_settings(session, db_user.telegram_id)

    text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"{'üîî' if settings.notify_expiry else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏\n"
        f"{'üîî' if settings.notify_traffic else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_toggle_inline(settings.notify_expiry, settings.notify_traffic),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_notify_"))
async def toggle_notification(callback: CallbackQuery, session: AsyncSession, db_user: User | None):
    """Toggle notification"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    notification_type = callback.data.replace("toggle_notify_", "")
    settings = await get_notification_settings(session, db_user.telegram_id)

    if notification_type == "expiry":
        new_value = not settings.notify_expiry
        await update_notification_settings(session, db_user.telegram_id, notify_expiry=new_value)
        await callback.answer(f"{'üîî –í–∫–ª—é—á–µ–Ω–æ' if new_value else 'üîï –í—ã–∫–ª—é—á–µ–Ω–æ'}")
    elif notification_type == "traffic":
        new_value = not settings.notify_traffic
        await update_notification_settings(session, db_user.telegram_id, notify_traffic=new_value)
        await callback.answer(f"{'üîî –í–∫–ª—é—á–µ–Ω–æ' if new_value else 'üîï –í—ã–∫–ª—é—á–µ–Ω–æ'}")

    # Refresh
    settings = await get_notification_settings(session, db_user.telegram_id)
    text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"{'üîî' if settings.notify_expiry else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏\n"
        f"{'üîî' if settings.notify_traffic else 'üîï'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_toggle_inline(settings.notify_expiry, settings.notify_traffic),
        parse_mode="HTML"
    )


# ============= ADMIN: ADD USER =============
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def start_add_user(message: Message, state: FSMContext, is_admin: bool):
    """Start add user flow"""
    if not is_admin:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
        return

    await state.set_state(AddUserStates.waiting_for_user)
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_request_user_keyboard(),
        parse_mode="HTML"
    )


@router.message(AddUserStates.waiting_for_user, F.users_shared)
async def user_selected(message: Message, state: FSMContext, session: AsyncSession, is_admin: bool):
    """Handle user selection"""
    if not is_admin:
        return

    if not message.users_shared or not message.users_shared.users:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    telegram_id = message.users_shared.users[0].user_id

    # Check if exists
    existing = await get_user_by_telegram_id(session, telegram_id)
    if existing:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            f"Marzban username: <code>{existing.marzban_username}</code>",
            reply_markup=get_main_admin_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        return

    # Store and ask for marzban username
    await state.update_data(telegram_id=telegram_id)
    await state.set_state(AddUserStates.waiting_for_marzban_username)

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω: <code>{telegram_id}</code>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>Marzban username</b>:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(AddUserStates.waiting_for_marzban_username, F.text)
async def marzban_username_entered(
    message: Message, state: FSMContext, session: AsyncSession, marzban: MarzbanAPI, is_admin: bool
):
    """Handle marzban username"""
    if not is_admin:
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_admin_keyboard())
        return

    marzban_username = message.text.strip()

    # Get telegram_id from state
    data = await state.get_data()
    telegram_id = data.get("telegram_id")

    # Check existing bindings for Marzban user
    existing_bindings = await list_user_bindings(session, marzban_username)

    # Prevent duplicate telegram binding
    if any(binding.telegram_id == telegram_id for binding in existing_bindings):
        await message.answer(
            f"‚ùå Telegram ID <code>{telegram_id}</code> —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ <code>{marzban_username}</code>",
            parse_mode="HTML",
        )
        await state.clear()
        return

    # Check if exists in Marzban, if not - create
    try:
        marzban_user = await marzban.get_user(marzban_username)
    except MarzbanAPIError:
        # User not found, create automatically
        try:
            await message.answer(
                f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{marzban_username}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Marzban\n"
                "–°–æ–∑–¥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...",
                parse_mode="HTML"
            )
            marzban_user = await marzban.create_user(
                username=marzban_username,
                data_limit=None,  # Unlimited
                expire=None,  # Unlimited
                status="active",
                note=f"Created via bot for TG user {telegram_id}"
            )
            logger.info(f"Auto-created user {marzban_username} in Marzban")
        except MarzbanAPIError as e:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban: {e}",
                parse_mode="HTML"
            )
            return

    existing_summary = ""
    if existing_bindings:
        summary_lines = []
        for binding in existing_bindings:
            badge = "‚≠êÔ∏è" if binding.primary_user else "‚Ä¢"
            summary_lines.append(f"{badge} <code>{binding.telegram_id}</code>")

        existing_summary = (
            "\n\n‚ö†Ô∏è <b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏:</b>\n"
            + "\n".join(summary_lines)
            + "\n‚ûï –ù–æ–≤—ã–π Telegram ID –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π."
        )
    else:
        existing_summary = "\n\n‚≠êÔ∏è –≠—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    # Store and confirm
    await state.update_data(marzban_username=marzban_username)

    await message.answer(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:</b>\n\n"
        f"Telegram ID: <code>{data['telegram_id']}</code>\n"
        f"Marzban username: <code>{marzban_username}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: {marzban_user.status}"
        f"{existing_summary}",
        reply_markup=get_confirmation_inline("confirm_add_user"),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_add_user")
async def confirm_add_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession, is_admin: bool):
    """Confirm and create user"""
    if not is_admin:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    data = await state.get_data()
    telegram_id = data["telegram_id"]
    marzban_username = data["marzban_username"]

    try:
        new_user = await create_user(session, telegram_id, marzban_username)
    except ValueError as error:
        await callback.answer(f"‚ùå {error}", show_alert=True)
        return

    await log_admin_action(
        session,
        callback.from_user.id,
        "add_user",
        marzban_username,
        f"tg: {telegram_id}, primary={new_user.primary_user}",
    )

    bindings = await list_user_bindings(session, marzban_username)
    bindings_lines = []
    for binding in bindings:
        badge = "‚≠êÔ∏è" if binding.primary_user else "‚Ä¢"
        bindings_lines.append(f"{badge} <code>{binding.telegram_id}</code>")

    role_note = (
        "‚≠êÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Å–Ω–æ–≤–Ω—ã–º Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–º."
        if new_user.primary_user
        else "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π Telegram-–∞–∫–∫–∞—É–Ω—Ç."
    )

    bindings_block = (
        "\n\nüìå <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏:</b>\n" + "\n".join(bindings_lines)
        if bindings_lines
        else ""
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"Telegram ID: <code>{telegram_id}</code>\n"
        f"Marzban username: <code>{marzban_username}</code>\n"
        f"{role_note}"
        f"{bindings_block}",
        parse_mode="HTML"
    )
    await callback.answer()
    await state.clear()

    # Send notification with keyboard
    await callback.message.answer(
        "–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_admin_keyboard()
    )


# ============= ADMIN: SEARCH USER =============
@router.message(F.text == "üîç –ù–∞–π—Ç–∏")
async def start_search(message: Message, state: FSMContext, is_admin: bool):
    """Start search"""
    if not is_admin:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
        return

    await state.set_state(SearchUserStates.waiting_for_query)
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ Marzban username:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(SearchUserStates.waiting_for_query, F.text)
async def search_query(message: Message, state: FSMContext, session: AsyncSession, is_admin: bool):
    """Handle search query"""
    if not is_admin:
        return

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_admin_keyboard())
        return

    query = message.text.strip()
    users = await search_users(session, query)

    if not users:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: <code>{query}</code>", parse_mode="HTML")
        return

    text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ ({len(users)}):</b>\n\n"
    for user in users:
        admin_badge = "üëë " if user.is_admin else ""
        role_label = "‚≠êÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π" if user.primary_user else "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
        text += (
            f"{admin_badge}<b>{user.marzban_username}</b>\n"
            f"‚îú –†–æ–ª—å: {role_label}\n"
            f"‚îú TG ID: <code>{user.telegram_id}</code>\n"
            f"‚îî –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        )

    await message.answer(text, reply_markup=get_main_admin_keyboard(), parse_mode="HTML")
    await state.clear()


# ============= ADMIN: LIST USERS =============
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫")
async def list_all_users(message: Message, is_admin: bool, session: AsyncSession):
    """List users with pagination"""
    if not is_admin:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
        return

    await show_users_page(message, session, 0)


async def show_users_page(message: Message, session: AsyncSession, page: int):
    """Show users page"""
    page_size = 10
    offset = page * page_size

    users, total = await list_users(session, offset=offset, limit=page_size)
    total_pages = math.ceil(total / page_size)

    if not users:
        await message.answer("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n–í—Å–µ–≥–æ: {total}\n\n"

    for i, user in enumerate(users, start=offset + 1):
        admin_badge = "üëë " if user.is_admin else ""
        role_label = "‚≠êÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π" if user.primary_user else "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
        text += (
            f"{i}. {admin_badge}<b>{user.marzban_username}</b>\n"
            f"   ‚îú –†–æ–ª—å: {role_label}\n"
            f"   ‚îú TG ID: <code>{user.telegram_id}</code>\n"
            f"   ‚îî –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        )

    await message.answer(
        text,
        reply_markup=get_user_list_navigation(page, total_pages),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("users_page:"))
async def users_pagination(callback: CallbackQuery, session: AsyncSession, is_admin: bool):
    """Handle pagination"""
    if not is_admin:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    page = int(callback.data.split(":")[1])
    page_size = 10
    offset = page * page_size

    users, total = await list_users(session, offset=offset, limit=page_size)
    total_pages = math.ceil(total / page_size)

    text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n–í—Å–µ–≥–æ: {total}\n\n"

    for i, user in enumerate(users, start=offset + 1):
        admin_badge = "üëë " if user.is_admin else ""
        role_label = "‚≠êÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π" if user.primary_user else "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
        text += (
            f"{i}. {admin_badge}<b>{user.marzban_username}</b>\n"
            f"   ‚îú –†–æ–ª—å: {role_label}\n"
            f"   ‚îú TG ID: <code>{user.telegram_id}</code>\n"
            f"   ‚îî –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        )

    await callback.message.edit_text(
        text,
        reply_markup=get_user_list_navigation(page, total_pages),
        parse_mode="HTML"
    )
    await callback.answer()


# ============= ADMIN: STATS =============
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message, is_admin: bool, session: AsyncSession):
    """Show statistics"""
    if not is_admin:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º")
        return

    users, total = await list_users(session, limit=1000)

    admin_count = sum(1 for u in users if u.is_admin)
    primary_count = sum(1 for u in users if u.primary_user)
    secondary_count = total - primary_count

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫: <b>{total}</b>\n"
        f"‚≠êÔ∏è –û—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{primary_count}</b>\n"
        f"‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{secondary_count}</b>\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{admin_count}</b>\n"
        f"üë§ –û–±—ã—á–Ω—ã—Ö: <b>{total - admin_count}</b>"
    )

    await message.answer(text, parse_mode="HTML")


# ============= CANCEL =============
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext, is_admin: bool):
    """Cancel any action"""
    await state.clear()
    keyboard = get_main_admin_keyboard() if is_admin else get_main_user_keyboard()
    await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)


@router.callback_query(F.data == "cancel")
async def cancel_callback(callback: CallbackQuery, state: FSMContext, is_admin: bool):
    """Cancel via callback"""
    await state.clear()
    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

    keyboard = get_main_admin_keyboard() if is_admin else get_main_user_keyboard()
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
