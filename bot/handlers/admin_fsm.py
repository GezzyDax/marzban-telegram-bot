"""FSM-based admin handlers"""

import logging

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    KeyboardButtonRequestUsers,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.states import AddUserStates, SearchUserStates, ToggleUserStatusStates
from bot.database import (
    create_user,
    get_user_by_telegram_id,
    list_user_bindings,
    log_admin_action,
    search_users,
)
from bot.services import MarzbanAPI, MarzbanAPIError
from bot.keyboards.admin_extended import (
    get_users_management_menu,
    get_cancel_button,
    get_confirmation_keyboard,
    get_user_search_result_keyboard,
)
from bot.utils.rate_limiter import rate_limit

logger = logging.getLogger(__name__)
router = Router(name="admin_fsm")


def admin_only(handler):
    """Decorator to check admin rights"""

    async def wrapper(event, *args, **kwargs):
        is_admin = kwargs.get("is_admin", False)
        if not is_admin:
            if isinstance(event, Message):
                await event.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            elif isinstance(event, CallbackQuery):
                await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        return await handler(event, *args, **kwargs)

    wrapper.__name__ = handler.__name__
    wrapper.__module__ = handler.__module__
    return wrapper


# ============= User Management Menu =============
@router.callback_query(F.data == "admin_users_menu")
@admin_only
async def show_users_menu(callback: CallbackQuery, **kwargs):
    """Show user management menu"""
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_users_management_menu(), parse_mode="HTML"
    )
    await callback.answer()


# ============= Add User FSM =============
@router.callback_query(F.data == "admin_add_user_start")
@admin_only
@rate_limit(seconds=3, action="add_user")
async def start_add_user(callback: CallbackQuery, state: FSMContext, **kwargs):
    """Start add user flow"""
    await state.set_state(AddUserStates.waiting_for_user)

    # Create keyboard with request_users button
    request_button = KeyboardButton(
        text="üë§ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram", request_users=KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    )
    keyboard = ReplyKeyboardMarkup(keyboard=[[request_button]], resize_keyboard=True, one_time_keyboard=True)

    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram.\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(AddUserStates.waiting_for_user, F.users_shared)
@admin_only
async def user_selected(message: Message, state: FSMContext, session: AsyncSession, **kwargs):
    """Handle user selection via users_shared"""
    if not message.users_shared or not message.users_shared.users:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return

    selected_user = message.users_shared.users[0]
    telegram_id = selected_user.user_id

    # Check if user already exists
    existing_user = await get_user_by_telegram_id(session, telegram_id)
    if existing_user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID <code>{telegram_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            f"Marzban username: <code>{existing_user.marzban_username}</code>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="HTML",
        )
        await state.clear()
        return

    # Store telegram_id and ask for marzban username
    await state.update_data(telegram_id=telegram_id)
    await state.set_state(AddUserStates.waiting_for_marzban_username)

    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω: <code>{telegram_id}</code>\n\n" "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>Marzban username</b> –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML",
    )


@router.message(AddUserStates.waiting_for_marzban_username, F.text)
@admin_only
async def marzban_username_entered(
    message: Message, state: FSMContext, session: AsyncSession, marzban: MarzbanAPI, **kwargs
):
    """Handle marzban username input"""
    marzban_username = message.text.strip()

    data = await state.get_data()
    telegram_id = data.get("telegram_id")
    if telegram_id is None:
        await state.clear()
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ",
            parse_mode="HTML",
        )
        return

    bindings = await list_user_bindings(session, marzban_username)
    if any(binding.telegram_id == telegram_id for binding in bindings):
        await message.answer(
            f"‚ùå Telegram ID <code>{telegram_id}</code> —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ <code>{marzban_username}</code>",
            parse_mode="HTML",
        )
        await state.clear()
        return

    # Check if user exists in Marzban
    try:
        marzban_user = await marzban.get_user(marzban_username)
    except MarzbanAPIError:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{marzban_username}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Marzban\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–∏ Marzban: https://marzban.gezzy.ru",
            parse_mode="HTML",
        )
        return

    existing_summary = ""
    if bindings:
        summary_lines = []
        for binding in bindings:
            badge = "‚≠êÔ∏è" if binding.primary_user else "‚Ä¢"
            summary_lines.append(f"{badge} <code>{binding.telegram_id}</code>")

        existing_summary = (
            "\n\n‚ö†Ô∏è <b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏:</b>\n"
            + "\n".join(summary_lines)
            + "\n‚ûï –ù–æ–≤—ã–π Telegram ID –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π."
        )
    else:
        existing_summary = "\n\n‚≠êÔ∏è –≠—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    # Store marzban_username and show confirmation
    await state.update_data(marzban_username=marzban_username)

    await message.answer(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"Telegram ID: <code>{telegram_id}</code>\n"
        f"Marzban username: <code>{marzban_username}</code>\n"
        f"–°—Ç–∞—Ç—É—Å –≤ Marzban: {marzban_user.status}"
        f"{existing_summary}",
        reply_markup=get_confirmation_keyboard("confirm_add_user"),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "confirm_add_user", AddUserStates.waiting_for_marzban_username)
@admin_only
async def confirm_add_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession, **kwargs):
    """Confirm and create user"""
    data = await state.get_data()
    telegram_id = data["telegram_id"]
    marzban_username = data["marzban_username"]

    try:
        new_user = await create_user(session, telegram_id, marzban_username)
    except ValueError as error:
        await callback.answer(f"‚ùå {error}", show_alert=True)
        return

    await log_admin_action(
        session,
        callback.from_user.id,
        "add_user",
        marzban_username,
        f"telegram_id: {telegram_id}, primary={new_user.primary_user}",
    )

    bindings = await list_user_bindings(session, marzban_username)
    bindings_lines = []
    for binding in bindings:
        badge = "‚≠êÔ∏è" if binding.primary_user else "‚Ä¢"
        bindings_lines.append(f"{badge} <code>{binding.telegram_id}</code>")

    role_note = (
        "‚≠êÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Å–Ω–æ–≤–Ω—ã–º Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–º."
        if new_user.primary_user
        else "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π Telegram-–∞–∫–∫–∞—É–Ω—Ç."
    )

    bindings_block = (
        "\n\nüìå <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏:</b>\n" + "\n".join(bindings_lines)
        if bindings_lines
        else ""
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        f"Telegram ID: <code>{telegram_id}</code>\n"
        f"Marzban username: <code>{marzban_username}</code>\n"
        f"{role_note}"
        f"{bindings_block}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start",
        parse_mode="HTML",
    )
    await callback.answer()
    await state.clear()


# ============= Search User FSM =============
@router.callback_query(F.data == "admin_search_user_start")
@admin_only
@rate_limit(seconds=2, action="search")
async def start_search_user(callback: CallbackQuery, state: FSMContext, **kwargs):
    """Start search user flow"""
    await state.set_state(SearchUserStates.waiting_for_query)
    await callback.message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ —á–∞—Å—Ç—å Marzban username:\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=get_cancel_button(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(SearchUserStates.waiting_for_query, F.text)
@admin_only
async def search_query_entered(message: Message, state: FSMContext, session: AsyncSession, marzban: MarzbanAPI, **kwargs):
    """Handle search query"""
    query = message.text.strip()
    users = await search_users(session, query)

    if not users:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <code>{query}</code>", parse_mode="HTML")
        return

    await message.answer(f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n", parse_mode="HTML")

    # Send each user as a separate message with action buttons
    for user in users:
        admin_badge = "üëë " if user.is_admin else ""
        role_label = "‚≠êÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π" if user.primary_user else "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π"

        # Get user status from Marzban
        try:
            marzban_user = await marzban.get_user(user.marzban_username)
            status_emoji = "üü¢" if marzban_user.status == "active" else "üî¥"
            status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if marzban_user.status == "active" else "–û—Ç–∫–ª—é—á–µ–Ω"

            text = (
                f"{admin_badge}<b>{user.marzban_username}</b> {status_emoji}\n"
                f"‚îú –†–æ–ª—å: {role_label}\n"
                f"‚îú TG ID: <code>{user.telegram_id}</code>\n"
                f"‚îú –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"‚îî –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n"
            )

            # Add action buttons
            keyboard = get_user_search_result_keyboard(user.telegram_id, marzban_user.status)
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        except MarzbanAPIError as e:
            logger.error(f"Failed to get Marzban user {user.marzban_username}: {e}")
            text = (
                f"{admin_badge}<b>{user.marzban_username}</b>\n"
                f"‚îú –†–æ–ª—å: {role_label}\n"
                f"‚îú TG ID: <code>{user.telegram_id}</code>\n"
                f"‚îú –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚îî –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n"
            )
            await message.answer(text, parse_mode="HTML")

    await state.clear()


# ============= Cancel FSM =============
@router.callback_query(F.data == "fsm_cancel")
async def cancel_fsm_callback(callback: CallbackQuery, state: FSMContext):
    """Cancel FSM via callback"""
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


@router.message(F.command("cancel"))
async def cancel_fsm_command(message: Message, state: FSMContext):
    """Cancel FSM via command"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())


# ============= Toggle User Status =============
@router.callback_query(F.data.startswith("toggle_status:"))
@admin_only
@rate_limit(seconds=3, action="toggle_status")
async def toggle_status_start(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession, marzban: MarzbanAPI, db_user, **kwargs
):
    """Start status toggle confirmation"""
    # Parse callback data: toggle_status:telegram_id:new_status
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    target_telegram_id = int(parts[1])
    new_status = parts[2]

    # Get target user from database
    target_user = await get_user_by_telegram_id(session, target_telegram_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Get current Marzban data
    try:
        marzban_user = await marzban.get_user(target_user.marzban_username)
    except MarzbanAPIError as e:
        logger.error(f"Failed to get Marzban user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Marzban", show_alert=True)
        return

    # Store data in FSM
    await state.update_data(
        target_telegram_id=target_telegram_id,
        target_username=target_user.marzban_username,
        new_status=new_status,
        old_status=marzban_user.status,
    )
    await state.set_state(ToggleUserStatusStates.confirmation)

    # Show confirmation
    status_change_text = f"{'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å' if new_status == 'disabled' else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'}"
    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{target_user.marzban_username}</b>\n"
        f"TG ID: <code>{target_telegram_id}</code>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if marzban_user.status == 'active' else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n"
        f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_change_text}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:"
    )

    keyboard = get_confirmation_keyboard("toggle_status_confirm")
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "toggle_status_confirm", ToggleUserStatusStates.confirmation)
@admin_only
async def toggle_status_confirm(
    callback: CallbackQuery, state: FSMContext, session: AsyncSession, marzban: MarzbanAPI, db_user, **kwargs
):
    """Confirm and execute status toggle"""
    data = await state.get_data()
    target_telegram_id = data["target_telegram_id"]
    target_username = data["target_username"]
    new_status = data["new_status"]
    old_status = data["old_status"]

    try:
        # Update status in Marzban
        await marzban.modify_user(target_username, status=new_status)

        # Log admin action
        await log_admin_action(
            session,
            admin_id=db_user.id,
            action="toggle_status",
            details=f"Changed status for {target_username} (TG: {target_telegram_id}) from {old_status} to {new_status}",
        )

        # Send notification to target user
        try:
            from aiogram import Bot

            bot: Bot = callback.bot
            notification_text = (
                f"‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                f"{'üü¢ –î–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if new_status == 'active' else 'üî¥ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
                f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await bot.send_message(target_telegram_id, notification_text, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"Failed to send notification to user {target_telegram_id}: {e}")

        # Success message
        success_text = (
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{target_username}</b>\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if new_status == 'active' else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏."
        )
        await callback.message.edit_text(success_text, parse_mode="HTML")

    except MarzbanAPIError as e:
        logger.error(f"Failed to toggle status: {e}")
        await callback.message.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n{str(e)}", parse_mode="HTML")
    except Exception as e:
        logger.error(f"Unexpected error during status toggle: {e}")
        await callback.message.edit_text(f"‚ùå <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n{str(e)}", parse_mode="HTML")
    finally:
        await state.clear()
        await callback.answer()
