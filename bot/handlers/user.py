"""User handlers"""

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from bot.database import User
from bot.services import MarzbanAPI
from bot.services.formatters import format_subscription_status, format_bytes
from bot.keyboards import get_user_main_menu, get_back_button, get_instruction_keyboard
from bot.keyboards.user_extended import get_user_main_menu_extended, get_subscription_submenu, get_instruction_menu
from bot.utils.formatters import format_progress_bar, format_date_relative, format_status_emoji
from datetime import datetime


logger = logging.getLogger(__name__)
router = Router(name="user")


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, db_user: User | None, is_admin: bool):
    """Handle back to menu button"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    keyboard = get_user_main_menu_extended()
    await callback.message.edit_text(
        f"üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: <code>{db_user.marzban_username}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "my_subscription")
async def show_subscription(callback: CallbackQuery, db_user: User | None, marzban: MarzbanAPI):
    """Show user subscription info (enhanced)"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        # Convert expire to datetime if needed
        expire_dt = None
        if marzban_user.expire:
            expire_dt = datetime.fromtimestamp(marzban_user.expire) if isinstance(marzban_user.expire, (int, float)) else marzban_user.expire

        # Get status emoji
        status_emoji = format_status_emoji(
            marzban_user.status,
            expire_dt,
            marzban_user.used_traffic,
            marzban_user.data_limit if marzban_user.data_limit else 0
        )

        # Traffic progress
        used = marzban_user.used_traffic
        limit = marzban_user.data_limit if marzban_user.data_limit else 0

        text = (
            f"{status_emoji} <b>–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <code>{marzban_user.username}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{marzban_user.status}</b>\n\n"
            f"üìà <b>–¢—Ä–∞—Ñ–∏–∫</b>\n"
        )

        if limit > 0:
            progress = format_progress_bar(used, limit)
            text += f"{progress}\n"
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used)} –∏–∑ {format_bytes(limit)}\n"
        else:
            text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used)}\n"
            text += "–õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç\n"

        if expire_dt:
            text += f"\nüìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</b>\n"
            text += format_date_relative(expire_dt)

        await callback.message.edit_text(
            text,
            reply_markup=get_subscription_submenu(),
            parse_mode="HTML",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to get user subscription: {e}")
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )


@router.callback_query(F.data == "get_link")
async def get_subscription_link(callback: CallbackQuery, db_user: User | None, marzban: MarzbanAPI):
    """Send subscription link to user"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        if not marzban_user.subscription_url:
            await callback.answer(
                "‚ùå Subscription URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                show_alert=True,
            )
            return

        text = (
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—ë –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç:\n\n"
            f"<code>{marzban_user.subscription_url}</code>\n\n"
            "üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë)\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç (V2Box/NekoBox)\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
            "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç VPN –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_back_button(),
            parse_mode="HTML",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to get subscription link: {e}")
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )


@router.callback_query(F.data == "instruction")
async def show_instruction(callback: CallbackQuery):
    """Show connection instruction (menu)"""
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_menu(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_menu")
async def show_instruction_menu(callback: CallbackQuery):
    """Show instruction menu"""
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_menu(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_mobile")
async def show_mobile_instruction(callback: CallbackQuery):
    """Show mobile instruction"""
    text = (
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "<b>iOS/Android:</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box\n"
        "2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç ‚Üí 'üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É'\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "4. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box ‚Üí '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
        "5. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Üí –í–∫–ª—é—á–∏—Ç–µ VPN"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_desktop")
async def show_desktop_instruction(callback: CallbackQuery):
    """Show desktop instruction"""
    text = (
        "üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</b>\n\n"
        "<b>Windows/Mac/Linux:</b>\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ NekoBox\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–æ—Ç–∞\n"
        "3. –û—Ç–∫—Ä–æ–π—Ç–µ NekoBox ‚Üí –ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\n"
        "4. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_faq")
async def show_faq(callback: CallbackQuery):
    """Show FAQ"""
    text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>Q: –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è VPN</b>\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.\n\n"
        "<b>Q: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b>\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.\n\n"
        "<b>Q: –ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏?</b>\n"
        "A: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí 'üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É'\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ùì –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_menu(),
        parse_mode="HTML",
    )
    await callback.answer()
