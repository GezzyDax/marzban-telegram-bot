"""–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã - —Ç–æ–ª—å–∫–æ callback –∫–Ω–æ–ø–∫–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""

import logging
import math
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database import (
    User,
    get_user_by_telegram_id,
    get_user_by_marzban_username,
    create_user,
    list_users,
    search_users,
    get_notification_settings,
    update_notification_settings,
    log_admin_action,
)
from bot.services import MarzbanAPI, MarzbanAPIError
from bot.services.formatters import format_bytes
from bot.utils.formatters import format_progress_bar, format_date_relative, format_status_emoji
from bot.keyboards.inline import (
    get_user_main_menu,
    get_admin_main_menu,
    get_subscription_menu,
    get_notification_settings_menu,
    get_instruction_menu,
    get_instruction_details_menu,
    get_request_user_keyboard,
    get_cancel_inline,
    get_confirmation_inline,
    get_user_list_navigation,
    get_back_to_menu,
    get_back_to_admin_menu,
)
from bot.states import AddUserStates, SearchUserStates

logger = logging.getLogger(__name__)
router = Router(name="new_handlers")


# ============= COMMANDS =============
@router.message(CommandStart())
async def cmd_start(message: Message, db_user: User | None, is_admin: bool):
    """Start command - show main menu"""
    if not db_user:
        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN.\n\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @hotloqer",
            parse_mode="HTML"
        )
        return

    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: <code>{db_user.marzban_username}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_menu(is_admin=is_admin),
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def cmd_help(message: Message, db_user: User | None, is_admin: bool):
    """Help command"""
    if not db_user:
        await message.answer(
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å—É Gezzolith.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @hotloqer",
            parse_mode="HTML"
        )
        return

    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @hotloqer"
    )

    await message.answer(help_text, parse_mode="HTML")


# ============= USER MENU =============
@router.callback_query(F.data == "back_to_user_menu")
async def back_to_user_menu(callback: CallbackQuery, db_user: User | None, is_admin: bool):
    """Return to user main menu"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        f"üë§ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: <code>{db_user.marzban_username}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_menu(is_admin=is_admin),
        parse_mode="HTML"
    )
    await callback.answer()


# ============= USER: SUBSCRIPTION =============
@router.callback_query(F.data == "user_subscription")
async def show_subscription(callback: CallbackQuery, db_user: User | None, marzban: MarzbanAPI):
    """Show detailed subscription info"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        # Parse dates
        expire_dt = None
        if marzban_user.expire:
            expire_dt = datetime.fromtimestamp(marzban_user.expire) if isinstance(marzban_user.expire, (int, float)) else marzban_user.expire

        # Status emoji
        status_emoji = format_status_emoji(
            marzban_user.status,
            expire_dt,
            marzban_user.used_traffic,
            marzban_user.data_limit if marzban_user.data_limit else 0
        )

        used = marzban_user.used_traffic
        limit = marzban_user.data_limit if marzban_user.data_limit else 0

        # Build message
        text = (
            f"{status_emoji} <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            f"üë§ Username: <code>{marzban_user.username}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{marzban_user.status.upper()}</b>\n"
        )

        # Add online status if available
        online_at = getattr(marzban_user, 'online_at', None)
        if online_at:
            online_dt = datetime.fromtimestamp(online_at) if isinstance(online_at, (int, float)) else online_at
            now = datetime.now()
            if (now - online_dt).total_seconds() < 300:  # 5 minutes
                text += f"üü¢ <b>ONLINE</b>\n"
            else:
                text += f"‚ö™Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {online_dt.strftime('%d.%m.%Y %H:%M')}\n"

        text += "\n"

        # Traffic info
        text += f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        if limit > 0:
            progress = format_progress_bar(used, limit)
            text += f"{progress}\n"
            text += f"‚îî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{format_bytes(used)}</b> –∏–∑ <b>{format_bytes(limit)}</b>\n"
            remaining = limit - used
            if remaining > 0:
                text += f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: <b>{format_bytes(remaining)}</b>\n"
            else:
                text += f"‚îî ‚ö†Ô∏è –¢—Ä–∞—Ñ–∏–∫ –∏—Å—á–µ—Ä–ø–∞–Ω\n"
        else:
            text += f"‚îî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{format_bytes(used)}</b>\n"
            text += f"‚îî –õ–∏–º–∏—Ç: <b>‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç</b>\n"

        # Expiry info
        if expire_dt:
            text += f"\nüìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            text += format_date_relative(expire_dt)
        else:
            text += f"\nüìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> ‚ôæ –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n"

        # Links count
        if hasattr(marzban_user, 'links') and marzban_user.links:
            text += f"\nüîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: <b>{len(marzban_user.links)}</b>\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_subscription_menu(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to get subscription: {e}", exc_info=True)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ", show_alert=True)


# ============= USER: SUBSCRIPTION LINK =============
@router.callback_query(F.data == "user_link")
async def get_subscription_link(callback: CallbackQuery, db_user: User | None, marzban: MarzbanAPI):
    """Get subscription link"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        marzban_user = await marzban.get_user(db_user.marzban_username)

        if not marzban_user.subscription_url:
            await callback.answer("‚ùå Subscription URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return

        text = (
            "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—ë –≤ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç:\n\n"
            f"<code>{marzban_user.subscription_url}</code>\n\n"
            "üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë)\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à VPN –∫–ª–∏–µ–Ω—Ç (V2Box/NekoBox)\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
            "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç VPN –∫–ª–∏–µ–Ω—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_menu(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to get subscription link: {e}", exc_info=True)
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True)


# ============= USER: INSTRUCTION =============
@router.callback_query(F.data == "user_instruction")
async def show_instruction(callback: CallbackQuery):
    """Show instruction menu"""
    text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_mobile")
async def instruction_mobile(callback: CallbackQuery):
    """Mobile instruction"""
    text = (
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "<b>iOS:</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ V2Box –∏–∑ App Store\n"
        "2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç ‚Üí 'üîó –°—Å—ã–ª–∫–∞'\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "4. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box ‚Üí '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
        "5. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Üí –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
        "<b>Android:</b>\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ V2Box –∏–∑ Google Play\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–æ—Ç–µ\n"
        "3. –í V2Box: '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
        "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_details_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_desktop")
async def instruction_desktop(callback: CallbackQuery):
    """Desktop instruction"""
    text = (
        "üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</b>\n\n"
        "<b>Windows/Mac/Linux:</b>\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ NekoBox –¥–ª—è –≤–∞—à–µ–π –û–°\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–æ—Ç–∞\n"
        "3. –û—Ç–∫—Ä–æ–π—Ç–µ NekoBox ‚Üí –ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\n"
        "4. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç—å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_details_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "instruction_faq")
async def instruction_faq(callback: CallbackQuery):
    """FAQ"""
    text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>Q: –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è VPN</b>\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "<b>Q: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b>\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–ø–∏—Å–∫–∞'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n"
        "<b>Q: –ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏?</b>\n"
        "A: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí 'üîó –°—Å—ã–ª–∫–∞'\n\n"
        "<b>Q: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Å—ã–ª–∫–∏</b>\n"
        "A: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –±–æ—Ç–µ.\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @hotloqer"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_instruction_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


# ============= USER: SETTINGS =============
@router.callback_query(F.data == "user_settings")
async def show_user_settings(callback: CallbackQuery, session: AsyncSession, db_user: User | None):
    """Show user settings"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    settings = await get_notification_settings(session, db_user.telegram_id)

    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
    )

    if settings.notify_expiry:
        text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: <b>–í–∫–ª—é—á–µ–Ω—ã</b>\n"
        text += f"‚îî –ó–∞ {settings.expiry_days} –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n"
    else:
        text += f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: <b>–í—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"

    if settings.notify_traffic:
        text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: <b>–í–∫–ª—é—á–µ–Ω—ã</b>\n"
        text += f"‚îî –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –∏ 95% –ª–∏–º–∏—Ç–∞\n"
    else:
        text += f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: <b>–í—ã–∫–ª—é—á–µ–Ω—ã</b>\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_settings_menu(settings.notify_expiry, settings.notify_traffic),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_notify_"))
async def toggle_notification(callback: CallbackQuery, session: AsyncSession, db_user: User | None):
    """Toggle notification setting"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    notification_type = callback.data.replace("toggle_notify_", "")
    settings = await get_notification_settings(session, db_user.telegram_id)

    if notification_type == "expiry":
        new_value = not settings.notify_expiry
        await update_notification_settings(session, db_user.telegram_id, notify_expiry=new_value)
        await callback.answer(f"{'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' if new_value else 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã'}")
    elif notification_type == "traffic":
        new_value = not settings.notify_traffic
        await update_notification_settings(session, db_user.telegram_id, notify_traffic=new_value)
        await callback.answer(f"{'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' if new_value else 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã'}")

    # Refresh display
    settings = await get_notification_settings(session, db_user.telegram_id)

    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
    )

    if settings.notify_expiry:
        text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: <b>–í–∫–ª—é—á–µ–Ω—ã</b>\n"
        text += f"‚îî –ó–∞ {settings.expiry_days} –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n"
    else:
        text += f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: <b>–í—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"

    if settings.notify_traffic:
        text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: <b>–í–∫–ª—é—á–µ–Ω—ã</b>\n"
        text += f"‚îî –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –∏ 95% –ª–∏–º–∏—Ç–∞\n"
    else:
        text += f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: <b>–í—ã–∫–ª—é—á–µ–Ω—ã</b>\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_settings_menu(settings.notify_expiry, settings.notify_traffic),
        parse_mode="HTML"
    )


# ============= ADMIN MENU =============
@router.callback_query(F.data == "admin_menu")
async def show_admin_menu(callback: CallbackQuery, is_admin: bool):
    """Show admin menu"""
    if not is_admin:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    text = (
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏—Å—Ç–µ–º–∞:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
