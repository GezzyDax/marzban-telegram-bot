"""User settings handlers"""

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from bot.database import get_notification_settings, update_notification_settings
from bot.keyboards.user_extended import get_notification_settings_keyboard, get_subscription_submenu

logger = logging.getLogger(__name__)
router = Router(name="user_settings")


@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: CallbackQuery, session: AsyncSession, db_user, **kwargs):
    """Show notification settings"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    settings = await get_notification_settings(session, db_user.telegram_id)

    text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"{'üîî' if settings.notify_expiry else 'üîï'} <b>–ò—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n"
        f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∑–∞ {settings.expiry_days} –¥–Ω–µ–π\n\n"
        f"{'üîî' if settings.notify_traffic else 'üîï'} <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n"
        "   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 80%, 90%, 100%\n\n"
        f"{'üîî' if settings.notify_status else 'üîï'} <b>–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞</b>\n"
        "   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_settings_keyboard(
            settings.notify_expiry, settings.notify_traffic, settings.notify_status
        ),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_notify_"))
async def toggle_notification(callback: CallbackQuery, session: AsyncSession, db_user, **kwargs):
    """Toggle notification setting"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    notification_type = callback.data.replace("toggle_notify_", "")
    settings = await get_notification_settings(session, db_user.telegram_id)

    if notification_type == "expiry":
        new_value = not settings.notify_expiry
        await update_notification_settings(session, db_user.telegram_id, notify_expiry=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {status}")
    elif notification_type == "traffic":
        new_value = not settings.notify_traffic
        await update_notification_settings(session, db_user.telegram_id, notify_traffic=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ {status}")
    elif notification_type == "status":
        new_value = not settings.notify_status
        await update_notification_settings(session, db_user.telegram_id, notify_status=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ {status}")

    # Refresh the settings display
    settings = await get_notification_settings(session, db_user.telegram_id)
    text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"{'üîî' if settings.notify_expiry else 'üîï'} <b>–ò—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n"
        f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –∑–∞ {settings.expiry_days} –¥–Ω–µ–π\n\n"
        f"{'üîî' if settings.notify_traffic else 'üîï'} <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n"
        "   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 80%, 90%, 100%\n\n"
        f"{'üîî' if settings.notify_status else 'üîï'} <b>–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞</b>\n"
        "   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_notification_settings_keyboard(
            settings.notify_expiry, settings.notify_traffic, settings.notify_status
        ),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "subscription_detailed")
async def show_detailed_subscription(callback: CallbackQuery, session: AsyncSession, db_user, marzban, **kwargs):
    """Show detailed subscription statistics"""
    if not db_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        from bot.services.formatters import format_bytes, format_date
        from bot.utils.formatters import format_progress_bar, format_date_relative, format_status_emoji
        from datetime import datetime

        marzban_user = await marzban.get_user(db_user.marzban_username)

        # Calculate days since creation (estimate)
        days_active = 30  # Default estimate
        if marzban_user.expire:
            # Assume 30-day subscription
            expire_dt = datetime.fromtimestamp(marzban_user.expire) if isinstance(marzban_user.expire, (int, float)) else marzban_user.expire
            now = datetime.now()
            if expire_dt > now:
                days_active = max(1, 30 - (expire_dt - now).days)

        # Traffic info
        used = marzban_user.used_traffic
        limit = marzban_user.data_limit if marzban_user.data_limit else 0
        progress = format_progress_bar(used, limit) if limit > 0 else "–ë–µ–∑–ª–∏–º–∏—Ç"

        # Status emoji
        expire_dt = datetime.fromtimestamp(marzban_user.expire) if isinstance(marzban_user.expire, (int, float)) else marzban_user.expire
        status_emoji = format_status_emoji(marzban_user.status, expire_dt, used, limit)

        # Average daily usage
        avg_daily = used / days_active if days_active > 0 else 0

        text = (
            f"{status_emoji} <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <code>{marzban_user.username}</code>\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{marzban_user.status}</b>\n\n"
            f"üìà <b>–¢—Ä–∞—Ñ–∏–∫</b>\n"
            f"{progress}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {format_bytes(used)}\n"
        )

        if limit > 0:
            text += f"–õ–∏–º–∏—Ç: {format_bytes(limit)}\n"
            text += f"–û—Å—Ç–∞–ª–æ—Å—å: {format_bytes(limit - used)}\n"
        else:
            text += "–õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç\n"

        text += f"\nüìâ <b>–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥</b>\n"
        text += f"–í –¥–µ–Ω—å: {format_bytes(avg_daily)}\n"

        if marzban_user.expire:
            text += f"\nüìÖ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç</b>\n"
            text += format_date_relative(expire_dt)

        await callback.message.edit_text(text, reply_markup=get_subscription_submenu(), parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Failed to get detailed subscription: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", show_alert=True)
